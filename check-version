#!/bin/bash
#
# Check Package Version v9.0 - Verificação de Atualização dos Programas - By Mauricio Ferrari
#
#############################################################################################


# Definições de Variáveis

R='\e[31m'
G='\e[32m'
Y='\e[33m'
B='\e[34m'
C='\e[36m'
T='\e[m'

msg1="Checking Package Version ..."
msg2="Checking Source Link ..."

: "${0##*/}"; file="${0/$_/package-list}"

status='DISABLE -d'
SCR='\e[43;30m'

NOT_ST="FALSE"
SL_PKG="FALSE"
NM=1
PG=2
SP=0


# Checkar SlackBuilds

var=(*SlackBuild)

[ ! -e $var ] && var=(*/*SlackBuild) || var=($var */*SlackBuild)

[ ! -e $var ] && {
	printf "\n${R}No SlackBuild Found!$T\n\n" >&2
	exit 1
}

TOT=${#var[@]}
PARM=${var[@]}


# Seleção se Parâmetros

while getopts :pd OPTION; do
	case $OPTION in
		p)  SL_PKG=TRUE
			;;
		d)  NOT_ST=TRUE
			PG=1
			;;
	esac
done

[ "$SL_PKG" == "TRUE" ] && {
	[ "$2" ] && {
		shift $((--OPTIND))
		PARM="$@"
		TOT=$(wc -w <<< $PARM)
	}
}

PROG=$(bc -l <<< "100/($TOT*$PG)")


# Gerador de Linha e Redefinidor de Linhas do Terminal

line()
{
    for ((i=0; i<$1; i++))
    {
        printf '─'
    }
}

clean()
{
    printf "\r%$1s\r" " "
}


# ### Gerar Cabeçalho da Tabela ###

printf "\n$B┌$(line 5)┬$(line 3)┬$(line 28)┬$(line 17)┬$(line 17)┬$(line 13)┐$T
$B│ QTD │ R │ Packages %18s│ Current Version │ New Version %4s│ ST SRC Link │$T
$B├$(line 5)┼$(line 3)┼$(line 28)┼$(line 17)┼$(line 17)┼$(line 13)┤$T\n"


# ### Loop para Verificação ###

for L in $(sort -u <(fmt -1 <<< $PARM))
{
	AMR=$Y; CLR=$R
	NVER='NOT FOUND'

	: $(grep "^PRGNAM=" $L); PKG=${_/*=/}
	: $(grep "^VERSION=[0-9]" $L); CVER=${_/*=/}
	: $(grep "^LINK[1]*=" $L); SLINK=${_/*=/}
	: $(grep -w "^$PKG " $file); METD=${_#*|}
	: "$(grep -w "^$PKG " $file)"; : "${_#* }"; VLINK="${_%| *}"


	# ### Controle de Versão ###

	[ "$NOT_ST" == "TRUE" ] && {
		clean 91
		printf "\e]0;($PKG) - [ $NM / $TOT ] $msg1 %.2f%% \a" "${SP/./,}"
		printf "$B└$(line 5)┴───┤$T $PKG %$((26-${#PKG}))s$B└─> $T [$R $NM $T/$R $TOT $T] $msg1 $R%.2f%% $T " " " "${SP/./,}"
	} || {
		printf "\e]0;($PKG) - [ $NM / $TOT ] : [ 1 / 2 ] $msg1 %.2f%% \a" "${SP/./,}"
		printf "$B└$(line 5)┴───┤$T $PKG %$((26-${#PKG}))s$B└─> $T [$R $NM $T/$R $TOT $T] : [$R 1$T /$R 2 $T] $msg1 $R%.2f%% $T " " " "${SP/./,}"
	}

	[ "$METD" == "MET0" ] && page="$(links -dump $VLINK 2>/dev/null)"
	[ "$CVER" == ":"    ] && CVER=$(grep -Eo "([[:digit:]]+[.])+[[:digit:]]+" <(echo {./,PKGS/}$PKG/*txz))
	[ "$METD" == "MET0" ] && NVER=$(head -1 <(grep -Eom1 "(([0-9]+)\.)+[0-9]+_*([a-z0-9])*" <(grep -Ev "([0-9]+\.)+[0-9]+k" <<< $page)))

	[ "$METD" == "MANUAL" ] && {
        NVER='MANUAL'
        CLR=$Y
    }

	[[ "$METD" =~ NONE|MAIN ]] && {
		NVER='DEFINED'
		CLR=$C; AMR=$C
	}

	[ "$CVER" == "$NVER" ] && CLR=$G

	[ "$CVER" == "" ] && {
		CVER='NOT FOUND'
		AMR=$R
	}


	# ### Status do Link ###

	[ "$NOT_ST" == "FALSE" ] && {
		SP=$(bc -l <<< "$SP+$PROG")
		clean 105
		printf "\e]0;($PKG) - [ $NM / $TOT ] : [ 2 / 2 ] $msg2 %.2f%% \a" "${SP/./,}"
		printf "$B└$(line 5)┴───┤$T $PKG %$((26-${#PKG}))s$B└─> $T [$R $NM $T/$R $TOT $T] : [$R 2$T /$R 2 $T] $msg2     $R%.2f%% $T " " " "${SP/./,}"

        SCR=$Y
        [ "$METD" == "MAIN" ] && {
            status="MAIN"
            SCR=$B
        } || status=$(./stcode $SLINK 2>&-)


        [ "$status" == "200" ] && SCR=$G
        [ "$status" == "404" ] && SCR=$R

		[ "$status" == "" ] && {
			status='NOT FOUND'
			SCR=$R
		}
	}


	# ### Verificação de Versões Obsoletas ###

    DP=(PKGS/$PKG/$PKG*txz)
    [ ! -e PKGS ] && DP=(../_PKGS/$PKG/$PKG*txz)


    [ "${#DP[@]}" -gt 1 ] && X='X' || X=' '


    # ### Resultado Final ###

    clean 110
    printf "$B│$T $Y%3d $B│$T ${R}$X $B│$T $CLR$PKG %$((26-${#PKG}))s$B│$T $AMR$CVER %$((15-${#CVER}))s$B│$T \
$CLR$NVER %$((15-${#NVER}))s$B│$T%$((11-${#status}))s $SCR$status$T $B│$T\n" "$NM"

    SP=$(bc -l <<< "$SP+$PROG")
    let NM++
    status=
}

printf "$B└$(line 5)┴$(line 3)┴$(line 28)┴$(line 17)┴$(line 17)┴$(line 13)┘$T\n"
exit 0
