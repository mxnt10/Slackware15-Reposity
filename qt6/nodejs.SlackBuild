#!/bin/sh

# Copyright 2023 Mauricio Ferrari <m10ferrari1200@gmail.com>
# All rights reserved.

[ $UID != 0 ] && { echo -e "\nExecute como Root !\n"; exit 1; }

PRGNAM=nodejs
SCRNAM=node
VERSION=20.9.0
BUILD=${BUILD:-1}
TAG=${TAG:-_mxnt}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

[ -e "../../_PKGS" ] && { mkdir -p ../../_PKGS/$PRGNAM; chown -R 1000:users ../../_PKGS; cd ../../_PKGS/$PRGNAM; } || {
    mkdir -p PKGS/$PRGNAM; chown -R 1000:users PKGS; cd PKGS/$PRGNAM
}

CWD=$PWD
TMP=/tmp/MXNT
PKG=$TMP/package-$PRGNAM
LINK=https://nodejs.org/dist/v20.9.0/node-v20.9.0.tar.gz

if [ "$ARCH" = "i586" ]; then
	SLKCFLAGS="-O2 -march=i586 -mtune=i686"
	LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
	SLKCFLAGS="-O2 -march=i686 -mtune=i686"
	LIBDIRSUFFIX=""
elif [ "$ARCH" = "aarch64" ]; then
	SLKCFLAGS="-O2"
	LIBDIRSUFFIX="64"
elif [ "$ARCH" = "x86_64" ]; then
	SLKCFLAGS="-O2 -fPIC"
	LIBDIRSUFFIX="64"
else
	SLKCFLAGS="-O2"
	LIBDIRSUFFIX=""
fi

set -e
wget -c $LINK
rm -rf $TMP
mkdir -p $PKG/{install,usr/{doc/$PRGNAM-$VERSION,share/bash-completion/completions/npm}}
cd $TMP; tar xvf $CWD/$SCRNAM-*$VERSION.tar.?z*
cd $SCRNAM-*$VERSION
chown -R root:root .
chmod -R u+w,go+r-w,a+X-s .

NUMJOBS=${NUMJOBS:-" -j$(expr $(nproc) + 1) "}

sed -i 's|share/||' tools/install.py

sed -i "s|lib/|lib${LIBDIRSUFFIX}/|g" tools/install.py
sed -i "s/'lib'/'lib${LIBDIRSUFFIX}'/" \
  lib/module.js \
  lib/internal/modules/cjs/loader.js \
  deps/npm/lib/npm.js

sed -i "s|math.h|cmath|" src/node_crypto.cc
./configure \
  --prefix=/usr \
  --shared-zlib \
  --shared-openssl \
  --ninja

make CFLAGS="$SLKCFLAGS" CXXFLAGS="$SLKCFLAGS" $NUMJOBS
make install DESTDIR=$PKG

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

find $PKG/usr/man -type f -exec gzip -9 {} \;
for i in $( find $PKG/usr/man -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done

cp -a LICENSE *.md $PKG/usr/doc/$PRGNAM-$VERSION

echo "#!/bin/bash
###-begin-npm-completion-###
#
# npm command completion script
#
# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
#

if type complete &>/dev/null; then
  _npm_completion () {
    local words cword
    if type _get_comp_words_by_ref &>/dev/null; then
      _get_comp_words_by_ref -n = -n @ -w words -i cword
    else
      cword=\"\$COMP_CWORD\"
      words=(\"\${COMP_WORDS[@]}\")
    fi

    local si=\"\$IFS\"
    IFS=$'\n' COMPREPLY=(\$(COMP_CWORD=\"\$cword\" COMP_LINE=\"\$COMP_LINE\" COMP_POINT=\"\$COMP_POINT\" npm completion -- \"\${words[@]}\" 2>/dev/null)) || return \$?
    IFS=\"\$si\"
  }
  complete -o default -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    local si=\$IFS
    compadd -- \$(COMP_CWORD=\$((CURRENT-1)) COMP_LINE=\$BUFFER COMP_POINT=0 npm completion -- \"\${words[@]}\" 2>/dev/null)
    IFS=\$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si=\"\$IFS\"
    IFS=$'\n' reply=(\$(COMP_CWORD=\"\$cword\" COMP_LINE=\"\$line\" COMP_POINT=\"\$point\" npm completion -- \"\${words[@]}\" 2>/dev/null)) || return \$?
    IFS=\"\$si\"
  }
  compctl -K _npm_completion npm
fi
###-end-npm-completion-###" > $PKG/usr/share/bash-completion/completions/npm/npm.sh

echo "      |-----handy-ruler------------------------------------------------------|
nodejs: nodejs (JavaScript runtime)
nodejs:
nodejs: Node.js is a JavaScript runtime built on Chrome's V8 JavaScript
nodejs: engine.
nodejs:
nodejs: https://nodejs.org/
nodejs:
nodejs:
nodejs:
nodejs:
nodejs:" > $PKG/install/slack-desc

cd $PKG; /sbin/makepkg -l y -c n $CWD/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.txz
chown -R 1000:users $CWD/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.txz
rm -rf $TMP

cd $CWD
[ ${TIME:-0} != 0 ] && TIME="-t $TIME" || TIME=
if [ "${INST:-no}" = "yes" ]; then
	OPTION=y
else
	read $TIME -p "O pacote jรก pode ser instalado? (y/n) (default=n)" OPTION
fi
case "$OPTION" in
	y|Y) /sbin/upgradepkg --install-new --reinstall $PRGNAM-$VERSION-$ARCH-$BUILD$TAG.txz ;;
esac; exit 0
