#!/bin/sh
# Games

# Slackware build script for quake2

# Copyright 2022 Mauricio Ferrari <m10ferrari1200@gmail.com>
# All rights reserved.

[ $UID != 0 ] && { echo -e "\nExecute como Root !\n"; exit 1; }

PRGNAM=quake2
VERSION=8.00
BUILD=${BUILD:-1}
TAG=${TAG:-_mxnt}

CTFVER=1.08
XATRIXVER=2.09
ROGUEVER=2.08

case "$( uname -m )" in
	i?86) export ARCH=i586 ;;
	arm*) export ARCH=arm ;;
	   *) export ARCH=$( uname -m ) ;;
esac

mkdir -p PKGS/$PRGNAM; chown -R 1000:users PKGS; cd PKGS/$PRGNAM

CWD=$PWD
TMP=/tmp
PKG=$TMP/package-$PRGNAM
LINK1=https://deponie.yamagi.org/quake2/quake2-8.00.tar.xz
LINK2=https://deponie.yamagi.org/quake2/quake2-ctf-1.08.tar.xz
LINK3=https://deponie.yamagi.org/quake2/quake2-rogue-2.08.tar.xz
LINK4=https://deponie.yamagi.org/quake2/quake2-xatrix-2.09.tar.xz
LINK5=https://deponie.yamagi.org/quake2/idstuff/q2-3.20-x86-full-ctf.exe
LINK6=https://github.com/MauricioFerrari-NovaTrento/Slackware15-Reposity/releases/download/Quake2/quake2tools.tar.xz

if [ "$ARCH" = "i586" ]; then
	SLKCFLAGS="-O2 -march=i586 -mtune=i686"
	LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
	SLKCFLAGS="-O2 -march=i686 -mtune=i686"
	LIBDIRSUFFIX=""
elif [ "$ARCH" = "aarch64" ]; then
	SLKCFLAGS="-O2"
	LIBDIRSUFFIX="64"
elif [ "$ARCH" = "x86_64" ]; then
	SLKCFLAGS="-O2 -fPIC"
	LIBDIRSUFFIX="64"
else
	SLKCFLAGS="-O2"
	LIBDIRSUFFIX=""
fi

set -e
wget -c $LINK1 $LINK2 $LINK3 $LINK4 $LINK5 $LINK6
rm -rf $PKG $TMP/{quake2-$VERSION,quake2-ctf-$CTFVER,quake2-xatrix-$XATRIXVER,quake2-rogue-$ROGUEVER,q2}
mkdir -p $PKG/{install,usr/{bin,share/{applications,pixmaps,quake2/{baseq2/maps,ctf,xatrix/maps,rogue/maps}},doc/$PRGNAM-$VERSION/{ctf-$CTFVER,quake2-xatrix-$XATRIXVER,quake2-rogue-$ROGUEVER}}}
cd $TMP; tar xvf $CWD/quake2-$VERSION.tar.xz
cd quake2-$VERSION
chown -R root:root .
chmod -R u+w,go+r-w,a+X-s .

mkdir build; cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_BUILD_TYPE=Release ..
  make
cd ..

cp -r build/release/* $PKG/usr/share/quake2
cp stuff/yq2.cfg $PKG/usr/share/quake2/baseq2
cp stuff/mapfixes/baseq2/* $PKG/usr/share/quake2/baseq2/maps
cp stuff/icon/Quake2.svg $PKG/usr/share/pixmaps

cd $TMP; tar xvf $CWD/quake2-ctf-$CTFVER.tar.xz
cd quake2-ctf-$CTFVER
chown -R root:root .
chmod -R u+w,go+r-w,a+X-s .

mkdir build; cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_BUILD_TYPE=Release ..
  make
  cp -r Release/* $PKG/usr/share/quake2/ctf
cd ..

cd $TMP; tar xvf $CWD/quake2-xatrix-$XATRIXVER.tar.xz
cd quake2-xatrix-$XATRIXVER
chown -R root:root .
chmod -R u+w,go+r-w,a+X-s .

mkdir build; cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_BUILD_TYPE=Release ..
  make
  cp -r Release/* $PKG/usr/share/quake2/xatrix
cd ..

cp stuff/mapfixes/* $PKG/usr/share/quake2/xatrix/maps

cd $TMP; tar xvf $CWD/quake2-rogue-$ROGUEVER.tar.xz
cd quake2-rogue-$ROGUEVER
chown -R root:root .
chmod -R u+w,go+r-w,a+X-s .

mkdir build; cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_BUILD_TYPE=Release ..
  make
  cp -r Release/* $PKG/usr/share/quake2/rogue
cd ..

cp stuff/mapfixes/* $PKG/usr/share/quake2/rogue/maps

find $PKG/usr/share/quake2 -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
cd $TMP; cp -a quake2-$VERSION/{CHANGELOG,LICENSE,README.md,stuff/yq2.cfg} $PKG/usr/doc/$PRGNAM-$VERSION
cp -a quake2-ctf-$CTFVER/{CHANGELOG,LICENSE,README} $PKG/usr/doc/$PRGNAM-$VERSION/ctf-$CTFVER
cp -a quake2-xatrix-$XATRIXVER/{CHANGELOG,LICENSE,README} $PKG/usr/doc/$PRGNAM-$VERSION/quake2-xatrix-$XATRIXVER
cp -a quake2-rogue-$ROGUEVER/{CHANGELOG,LICENSE,README} $PKG/usr/doc/$PRGNAM-$VERSION/quake2-rogue-$ROGUEVER

mkdir q2; cd q2
unzip $CWD/q2-3.20-x86-full-ctf.exe
chown -R root:root .
chmod -R u+w,go+r-w,a+X-s .

cp -a baseq2/{pak{1,2}.pak,maps.lst,players} $PKG/usr/share/quake2/baseq2
cp -a ctf/pak0.pak $PKG/usr/share/quake2/ctf

cd $TMP; tar xvf $CWD/quake2tools.tar.xz
cd quake2tools
chown -R root:root .
chmod -R u+w,go+r-w,a+X-s .

cp -r * $PKG/usr/share/quake2

echo '#!/bin/sh
exec /usr/share/quake2/quake2 +set basedir /usr/share/quake2 +set game ctf $*' > $PKG/usr/bin/ctf

echo '#!/bin/sh
exec /usr/share/quake2/quake2 +set basedir /usr/share/quake2 +set game rogue $*' > $PKG/usr/bin/rogue

echo '#!/bin/sh
exec /usr/share/quake2/quake2 +set basedir /usr/share/quake2 +set game xatrix $*' > $PKG/usr/bin/xatrix

echo '#!/bin/sh
exec /usr/share/quake2/quake2 +set basedir /usr/share/quake2 $*' > $PKG/usr/bin/quake2

chmod +x $PKG/usr/bin/quake2
chmod +x $PKG/usr/bin/ctf
chmod +x $PKG/usr/bin/rogue
chmod +x $PKG/usr/bin/xatrix

echo '[Desktop Entry]
Name=Quake 2
GenericName=Quake 2
Exec=quake2
Icon=Quake2
Type=Application
Categories=Game;' > $PKG/usr/share/applications/quake2.desktop

echo '[Desktop Entry]
Name=Quake 2 Ground Zero
GenericName=Quake 2 Ground Zero
Exec=rogue
Icon=Quake2
Type=Application
Categories=Game;' > $PKG/usr/share/applications/quake2rogue.desktop

echo '[Desktop Entry]
Name=Quake 2 The Reckoning
GenericName=Quake 2 The Reckoning
Exec=xatrix
Icon=Quake2
Type=Application
Categories=Game;' > $PKG/usr/share/applications/quake2xatrix.desktop

echo 'if [ -x /usr/bin/update-desktop-database ]; then
	/usr/bin/update-desktop-database -q usr/share/applications >/dev/null 2>&1
fi

if [ -x /usr/bin/update-mime-database ]; then
	/usr/bin/update-mime-database usr/share/mime >/dev/null 2>&1
fi

if [ -e usr/share/icons/hicolor/icon-theme.cache ]; then
	if [ -x /usr/bin/gtk-update-icon-cache ]; then
		/usr/bin/gtk-update-icon-cache usr/share/icons/hicolor >/dev/null 2>&1
	fi
fi

if [ -e usr/share/glib-2.0/schemas ]; then
	if [ -x /usr/bin/glib-compile-schemas ]; then
		/usr/bin/glib-compile-schemas usr/share/glib-2.0/schemas >/dev/null 2>&1
	fi
fi' > $PKG/install/doinst.sh

echo "      |-----handy-ruler------------------------------------------------------|
quake2: quake2 (Yamagi Quake II Client)
quake2:
quake2: This is an enhanced client for Id Software's legendary Quake II. It
quake2: focuses on single-player. Features include rock-solid stability and
quake2: AMD64 support.
quake2:
quake2: http://www.yamagi.org/quake2/
quake2:
quake2:
quake2:
quake2:" > $PKG/install/slack-desc

cd $PKG; /sbin/makepkg -l y -c n $CWD/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.txz
chown -R 1000:users $CWD/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.txz
rm -rf $PKG $TMP/{quake2-$VERSION,quake2-ctf-$CTFVER,quake2-xatrix-$XATRIXVER,quake2-rogue-$ROGUEVER,q2}

cd $CWD
[ ${TIME:-0} != 0 ] && TIME="-t $TIME" || TIME=
if [ "${INST:-no}" = "yes" ]; then
	OPTION=y
else
	read $TIME -p "O pacote jรก pode ser instalado? (y/n) (default=n)" OPTION
fi
case "$OPTION" in
	y|Y) /sbin/upgradepkg --install-new --reinstall $PRGNAM-$VERSION-$ARCH-$BUILD$TAG.txz ;;
esac; exit 0
