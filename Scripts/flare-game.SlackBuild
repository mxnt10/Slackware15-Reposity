#!/bin/sh

# Slackware build script for flare-game

# Copyright 2021 Mauricio Ferrari <m10ferrari1200@gmail.com>
# All rights reserved.

[ $UID != 0 ] && { echo -e "\nExecute como Root !\n"; exit 1; }

PRGNAM=flare-game
SRCNAM=flare-engine
VERSION=1.11
BUILD=${BUILD:-1}
TAG=${TAG:-_mxnt}

case "$( uname -m )" in
	i?86) ARCH=i586 ;;
	arm*) ARCH=arm ;;
	   *) ARCH=$( uname -m ) ;;
esac

WD=$PWD; mkdir -p $PRGNAM; chown -R 1000:users $PRGNAM; cd $PRGNAM 

CWD=$PWD
TMP=/tmp
PKG=$TMP/package-$PRGNAM
LINK1=https://github.com/flareteam/flare-engine/archive/v1.11/flare-engine-1.11.tar.gz
LINK2=https://github.com/flareteam/flare-game/archive/v1.11/flare-game-1.11.tar.gz

if [ "$ARCH" = "i586" ]; then
	SLKCFLAGS="-O2 -march=i586 -mtune=i686"
	LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
	SLKCFLAGS="-O2 -march=i686 -mtune=i686"
	LIBDIRSUFFIX=""
elif [ "$ARCH" = "aarch64" ]; then
	SLKCFLAGS="-O2"
	LIBDIRSUFFIX="64"
elif [ "$ARCH" = "x86_64" ]; then
	SLKCFLAGS="-O2 -fPIC"
	LIBDIRSUFFIX="64"
else
	SLKCFLAGS="-O2"
	LIBDIRSUFFIX=""
fi

set -e
wget -c $LINK1 $LINK2
rm -rf $PKG $TMP/{$SRCNAM-$VERSION,$PRGNAM2-$VERSION}
mkdir -p $PKG/{install,usr/{man,share/{applications,pixmaps},doc/{$PRGNAM-$VERSION,$SRCNAM-$VERSION}}}
cd $TMP; tar xvf $CWD/$SRCNAM-$VERSION.tar.?z
tar xvf $CWD/$PRGNAM-$VERSION.tar.?z
cd $SRCNAM-$VERSION
chown -R root:root .
chmod -R u+w,go+r-w,a+X-s .

cmake \
  -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DCMAKE_BUILD_TYPE=Release .
make; make install DESTDIR=$PKG

mv $PKG/usr/share/man/man6 $PKG/usr/man
rm -rf $PKG/usr/share/man
find $PKG/usr/man -type f -exec gzip -9 {} \;
for i in $( find $PKG/usr/man -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done
find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
install -D -m644 distribution/Flare.ico $PKG/usr/share/pixmaps/$PRGNAM.svg
cp -a COPYING CREDITS*.txt README*.md RELEASE_NOTES.txt $PKG/usr/doc/$SRCNAM-$VERSION
cd ../$PRGNAM-$VERSION
chown -R root:root .
chmod -R u+w,go+r-w,a+X-s .

cmake \
  -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DCMAKE_BUILD_TYPE=Release .
make; make install DESTDIR=$PKG

find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
cp -a CREDITS.txt README README.md $PKG/usr/doc/$PRGNAM-$VERSION

echo "[Desktop Entry]
Name=Flare
Comment=Action Role-Playing Game RPG
Exec=flare
Icon=flare
Terminal=false
Type=Application
Categories=Game;RolePlaying;
GenericName=Flare Game" > $PKG/usr/share/applications/$PRGNAM.desktop

echo "     |-----handy-ruler------------------------------------------------------|
flare-game: flare-game (Action Role-Playing Game)
flare-game:
flare-game: A single-player 2D action RPG. Flare is not a reimplementation of an
flare-game: existing game or engine. It is a tribute to and exploration of the
flare-game: action RPG genre.
flare-game:
flare-game: Homepage: http://flarerpg.org/
flare-game:
flare-game:
flare-game:
flare-game:" > $PKG/install/slack-desc

echo "if [ -x /usr/bin/update-desktop-database ]; then
	/usr/bin/update-desktop-database -q usr/share/applications >/dev/null 2>&1
fi

if [ -x /usr/bin/update-mime-database ]; then
	/usr/bin/update-mime-database usr/share/mime >/dev/null 2>&1
fi

if [ -e usr/share/icons/hicolor/icon-theme.cache ]; then
	if [ -x /usr/bin/gtk-update-icon-cache ]; then
		/usr/bin/gtk-update-icon-cache usr/share/icons/hicolor >/dev/null 2>&1
	fi
fi

if [ -e usr/share/glib-2.0/schemas ]; then
	if [ -x /usr/bin/glib-compile-schemas ]; then
		/usr/bin/glib-compile-schemas usr/share/glib-2.0/schemas >/dev/null 2>&1
	fi
fi" > $PKG/install/doinst.sh

cd $PKG; /sbin/makepkg -l y -c n $CWD/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.txz
chown -R 1000:users $CWD/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.txz
rm -rf $PKG $TMP/{$SRCNAM-$VERSION,$PRGNAM2-$VERSION}

cd $CWD
if [ "${INST:-no}" = "yes" ]; then
	OPTION=y
else
	[ -e "../Exclamation.mp3" ] && pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY mplayer $WD/Exclamation.mp3 > /dev/null
	read -p "O pacote jรก pode ser instalado? (y/n) (default=n)" OPTION
fi
case "$OPTION" in
	y|Y) /sbin/upgradepkg --install-new --reinstall $PRGNAM-$VERSION-$ARCH-$BUILD$TAG.txz ;;
esac; exit 0
